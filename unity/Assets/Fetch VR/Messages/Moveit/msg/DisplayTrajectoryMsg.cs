//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class DisplayTrajectoryMsg : Message
    {
        public const string k_RosMessageName = "moveit_msgs/DisplayTrajectory";
        public override string RosMessageName => k_RosMessageName;

        //  The model id for which this path has been generated
        public string model_id;
        //  The representation of the path contains position values for all the joints that are moving along the path; a sequence of trajectories may be specified
        public RobotTrajectoryMsg[] trajectory;
        //  The robot state is used to obtain positions for all/some of the joints of the robot. 
        //  It is used by the path display node to determine the positions of the joints that are not specified in the joint path message above. 
        //  If the robot state message contains joint position information for joints that are also mentioned in the joint path message, the positions in the joint path message will overwrite the positions specified in the robot state message. 
        public RobotStateMsg trajectory_start;

        public DisplayTrajectoryMsg()
        {
            this.model_id = "";
            this.trajectory = new RobotTrajectoryMsg[0];
            this.trajectory_start = new RobotStateMsg();
        }

        public DisplayTrajectoryMsg(string model_id, RobotTrajectoryMsg[] trajectory, RobotStateMsg trajectory_start)
        {
            this.model_id = model_id;
            this.trajectory = trajectory;
            this.trajectory_start = trajectory_start;
        }

        public static DisplayTrajectoryMsg Deserialize(MessageDeserializer deserializer) => new DisplayTrajectoryMsg(deserializer);

        private DisplayTrajectoryMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.model_id);
            deserializer.Read(out this.trajectory, RobotTrajectoryMsg.Deserialize, deserializer.ReadLength());
            this.trajectory_start = RobotStateMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.model_id);
            serializer.WriteLength(this.trajectory);
            serializer.Write(this.trajectory);
            serializer.Write(this.trajectory_start);
        }

        public override string ToString()
        {
            return "DisplayTrajectoryMsg: " +
            "\nmodel_id: " + model_id.ToString() +
            "\ntrajectory: " + System.String.Join(", ", trajectory.ToList()) +
            "\ntrajectory_start: " + trajectory_start.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
