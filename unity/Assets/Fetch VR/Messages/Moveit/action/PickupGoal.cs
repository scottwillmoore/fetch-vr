//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class PickupGoal : Message
    {
        public const string k_RosMessageName = "moveit_msgs/Pickup";
        public override string RosMessageName => k_RosMessageName;

        //  An action for picking up an object
        //  The name of the object to pick up (as known in the planning scene)
        public string target_name;
        //  which group should be used to plan for pickup
        public string group_name;
        //  which end-effector to be used for pickup (ideally descending from the group above)
        public string end_effector;
        //  a list of possible grasps to be used. At least one grasp must be filled in
        public GraspMsg[] possible_grasps;
        //  the name that the support surface (e.g. table) has in the collision map
        //  can be left empty if no name is available
        public string support_surface_name;
        //  whether collisions between the gripper and the support surface should be acceptable
        //  during move from pre-grasp to grasp and during lift. Collisions when moving to the
        //  pre-grasp location are still not allowed even if this is set to true.
        public bool allow_gripper_support_collision;
        //  The names of the links the object to be attached is allowed to touch;
        //  If this is left empty, it defaults to the links in the used end-effector
        public string[] attached_object_touch_links;
        //  Optionally notify the pick action that it should approach the object further,
        //  as much as possible (this minimizing the distance to the object before the grasp)
        //  along the approach direction; Note: this option changes the grasping poses
        //  supplied in possible_grasps[] such that they are closer to the object when possible.
        public bool minimize_object_distance;
        //  Optional constraints to be imposed on every point in the motion plan
        public ConstraintsMsg path_constraints;
        //  The name of the motion planner to use. If no name is specified,
        //  a default motion planner will be used
        public string planner_id;
        //  an optional list of obstacles that we have semantic information about
        //  and that can be touched/pushed/moved in the course of grasping;
        //  CAREFUL: If the object name 'all' is used, collisions with all objects are disabled during the approach & lift.
        public string[] allowed_touch_objects;
        //  The maximum amount of time the motion planner is allowed to plan for
        public double allowed_planning_time;
        //  Planning options
        public PlanningOptionsMsg planning_options;

        public PickupGoal()
        {
            this.target_name = "";
            this.group_name = "";
            this.end_effector = "";
            this.possible_grasps = new GraspMsg[0];
            this.support_surface_name = "";
            this.allow_gripper_support_collision = false;
            this.attached_object_touch_links = new string[0];
            this.minimize_object_distance = false;
            this.path_constraints = new ConstraintsMsg();
            this.planner_id = "";
            this.allowed_touch_objects = new string[0];
            this.allowed_planning_time = 0.0;
            this.planning_options = new PlanningOptionsMsg();
        }

        public PickupGoal(string target_name, string group_name, string end_effector, GraspMsg[] possible_grasps, string support_surface_name, bool allow_gripper_support_collision, string[] attached_object_touch_links, bool minimize_object_distance, ConstraintsMsg path_constraints, string planner_id, string[] allowed_touch_objects, double allowed_planning_time, PlanningOptionsMsg planning_options)
        {
            this.target_name = target_name;
            this.group_name = group_name;
            this.end_effector = end_effector;
            this.possible_grasps = possible_grasps;
            this.support_surface_name = support_surface_name;
            this.allow_gripper_support_collision = allow_gripper_support_collision;
            this.attached_object_touch_links = attached_object_touch_links;
            this.minimize_object_distance = minimize_object_distance;
            this.path_constraints = path_constraints;
            this.planner_id = planner_id;
            this.allowed_touch_objects = allowed_touch_objects;
            this.allowed_planning_time = allowed_planning_time;
            this.planning_options = planning_options;
        }

        public static PickupGoal Deserialize(MessageDeserializer deserializer) => new PickupGoal(deserializer);

        private PickupGoal(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.target_name);
            deserializer.Read(out this.group_name);
            deserializer.Read(out this.end_effector);
            deserializer.Read(out this.possible_grasps, GraspMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.support_surface_name);
            deserializer.Read(out this.allow_gripper_support_collision);
            deserializer.Read(out this.attached_object_touch_links, deserializer.ReadLength());
            deserializer.Read(out this.minimize_object_distance);
            this.path_constraints = ConstraintsMsg.Deserialize(deserializer);
            deserializer.Read(out this.planner_id);
            deserializer.Read(out this.allowed_touch_objects, deserializer.ReadLength());
            deserializer.Read(out this.allowed_planning_time);
            this.planning_options = PlanningOptionsMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.target_name);
            serializer.Write(this.group_name);
            serializer.Write(this.end_effector);
            serializer.WriteLength(this.possible_grasps);
            serializer.Write(this.possible_grasps);
            serializer.Write(this.support_surface_name);
            serializer.Write(this.allow_gripper_support_collision);
            serializer.WriteLength(this.attached_object_touch_links);
            serializer.Write(this.attached_object_touch_links);
            serializer.Write(this.minimize_object_distance);
            serializer.Write(this.path_constraints);
            serializer.Write(this.planner_id);
            serializer.WriteLength(this.allowed_touch_objects);
            serializer.Write(this.allowed_touch_objects);
            serializer.Write(this.allowed_planning_time);
            serializer.Write(this.planning_options);
        }

        public override string ToString()
        {
            return "PickupGoal: " +
            "\ntarget_name: " + target_name.ToString() +
            "\ngroup_name: " + group_name.ToString() +
            "\nend_effector: " + end_effector.ToString() +
            "\npossible_grasps: " + System.String.Join(", ", possible_grasps.ToList()) +
            "\nsupport_surface_name: " + support_surface_name.ToString() +
            "\nallow_gripper_support_collision: " + allow_gripper_support_collision.ToString() +
            "\nattached_object_touch_links: " + System.String.Join(", ", attached_object_touch_links.ToList()) +
            "\nminimize_object_distance: " + minimize_object_distance.ToString() +
            "\npath_constraints: " + path_constraints.ToString() +
            "\nplanner_id: " + planner_id.ToString() +
            "\nallowed_touch_objects: " + System.String.Join(", ", allowed_touch_objects.ToList()) +
            "\nallowed_planning_time: " + allowed_planning_time.ToString() +
            "\nplanning_options: " + planning_options.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
