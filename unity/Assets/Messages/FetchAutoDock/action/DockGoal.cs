//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.FetchAutoDock
{
    [Serializable]
    public class DockGoal : Message
    {
        public const string k_RosMessageName = "fetch_auto_dock_msgs/Dock";
        public override string RosMessageName => k_RosMessageName;

        //  Inital pose of the dock, usually map referenced
        //  If the header is empty, or quaternion = (0 0 0 0), then
        //    the intial dock pose will be straight ahead of the robot
        public Geometry.PoseStampedMsg dock_pose;
        //  Specify an (optional) name for the dock
        public string dock_id;
        //  We can optionally request that the docking node call on the
        //  navigation stack to get near the dock if we are too far away
        public bool use_move_base;

        public DockGoal()
        {
            this.dock_pose = new Geometry.PoseStampedMsg();
            this.dock_id = "";
            this.use_move_base = false;
        }

        public DockGoal(Geometry.PoseStampedMsg dock_pose, string dock_id, bool use_move_base)
        {
            this.dock_pose = dock_pose;
            this.dock_id = dock_id;
            this.use_move_base = use_move_base;
        }

        public static DockGoal Deserialize(MessageDeserializer deserializer) => new DockGoal(deserializer);

        private DockGoal(MessageDeserializer deserializer)
        {
            this.dock_pose = Geometry.PoseStampedMsg.Deserialize(deserializer);
            deserializer.Read(out this.dock_id);
            deserializer.Read(out this.use_move_base);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.dock_pose);
            serializer.Write(this.dock_id);
            serializer.Write(this.use_move_base);
        }

        public override string ToString()
        {
            return "DockGoal: " +
            "\ndock_pose: " + dock_pose.ToString() +
            "\ndock_id: " + dock_id.ToString() +
            "\nuse_move_base: " + use_move_base.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize, MessageSubtopic.Goal);
        }
    }
}
