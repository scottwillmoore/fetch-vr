//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.FetchDriver
{
    [Serializable]
    public class ChargerStateMsg : Message
    {
        public const string k_RosMessageName = "fetch_driver_msgs/ChargerState";
        public override string RosMessageName => k_RosMessageName;

        public byte state;
        public byte error;
        //  Charging mode is defined as:
        //   0 - float charge (last 10%)
        //   1 - charging
        //   2 - not charging
        public byte charging_mode;
        public byte limit_cause;
        public byte balancing_mode;
        public float battery_voltage;
        public float battery_half_voltage;
        public float charger_voltage;
        public float supply_voltage;
        public float phase1_current;
        public float phase2_current;
        public float charger_temp;
        public float battery_temp;
        public float supply_connector_temp;
        public float fan_speed;
        public float battery_capacity;
        public float battery_energy;

        public ChargerStateMsg()
        {
            this.state = 0;
            this.error = 0;
            this.charging_mode = 0;
            this.limit_cause = 0;
            this.balancing_mode = 0;
            this.battery_voltage = 0.0f;
            this.battery_half_voltage = 0.0f;
            this.charger_voltage = 0.0f;
            this.supply_voltage = 0.0f;
            this.phase1_current = 0.0f;
            this.phase2_current = 0.0f;
            this.charger_temp = 0.0f;
            this.battery_temp = 0.0f;
            this.supply_connector_temp = 0.0f;
            this.fan_speed = 0.0f;
            this.battery_capacity = 0.0f;
            this.battery_energy = 0.0f;
        }

        public ChargerStateMsg(byte state, byte error, byte charging_mode, byte limit_cause, byte balancing_mode, float battery_voltage, float battery_half_voltage, float charger_voltage, float supply_voltage, float phase1_current, float phase2_current, float charger_temp, float battery_temp, float supply_connector_temp, float fan_speed, float battery_capacity, float battery_energy)
        {
            this.state = state;
            this.error = error;
            this.charging_mode = charging_mode;
            this.limit_cause = limit_cause;
            this.balancing_mode = balancing_mode;
            this.battery_voltage = battery_voltage;
            this.battery_half_voltage = battery_half_voltage;
            this.charger_voltage = charger_voltage;
            this.supply_voltage = supply_voltage;
            this.phase1_current = phase1_current;
            this.phase2_current = phase2_current;
            this.charger_temp = charger_temp;
            this.battery_temp = battery_temp;
            this.supply_connector_temp = supply_connector_temp;
            this.fan_speed = fan_speed;
            this.battery_capacity = battery_capacity;
            this.battery_energy = battery_energy;
        }

        public static ChargerStateMsg Deserialize(MessageDeserializer deserializer) => new ChargerStateMsg(deserializer);

        private ChargerStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.state);
            deserializer.Read(out this.error);
            deserializer.Read(out this.charging_mode);
            deserializer.Read(out this.limit_cause);
            deserializer.Read(out this.balancing_mode);
            deserializer.Read(out this.battery_voltage);
            deserializer.Read(out this.battery_half_voltage);
            deserializer.Read(out this.charger_voltage);
            deserializer.Read(out this.supply_voltage);
            deserializer.Read(out this.phase1_current);
            deserializer.Read(out this.phase2_current);
            deserializer.Read(out this.charger_temp);
            deserializer.Read(out this.battery_temp);
            deserializer.Read(out this.supply_connector_temp);
            deserializer.Read(out this.fan_speed);
            deserializer.Read(out this.battery_capacity);
            deserializer.Read(out this.battery_energy);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.state);
            serializer.Write(this.error);
            serializer.Write(this.charging_mode);
            serializer.Write(this.limit_cause);
            serializer.Write(this.balancing_mode);
            serializer.Write(this.battery_voltage);
            serializer.Write(this.battery_half_voltage);
            serializer.Write(this.charger_voltage);
            serializer.Write(this.supply_voltage);
            serializer.Write(this.phase1_current);
            serializer.Write(this.phase2_current);
            serializer.Write(this.charger_temp);
            serializer.Write(this.battery_temp);
            serializer.Write(this.supply_connector_temp);
            serializer.Write(this.fan_speed);
            serializer.Write(this.battery_capacity);
            serializer.Write(this.battery_energy);
        }

        public override string ToString()
        {
            return "ChargerStateMsg: " +
            "\nstate: " + state.ToString() +
            "\nerror: " + error.ToString() +
            "\ncharging_mode: " + charging_mode.ToString() +
            "\nlimit_cause: " + limit_cause.ToString() +
            "\nbalancing_mode: " + balancing_mode.ToString() +
            "\nbattery_voltage: " + battery_voltage.ToString() +
            "\nbattery_half_voltage: " + battery_half_voltage.ToString() +
            "\ncharger_voltage: " + charger_voltage.ToString() +
            "\nsupply_voltage: " + supply_voltage.ToString() +
            "\nphase1_current: " + phase1_current.ToString() +
            "\nphase2_current: " + phase2_current.ToString() +
            "\ncharger_temp: " + charger_temp.ToString() +
            "\nbattery_temp: " + battery_temp.ToString() +
            "\nsupply_connector_temp: " + supply_connector_temp.ToString() +
            "\nfan_speed: " + fan_speed.ToString() +
            "\nbattery_capacity: " + battery_capacity.ToString() +
            "\nbattery_energy: " + battery_energy.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
