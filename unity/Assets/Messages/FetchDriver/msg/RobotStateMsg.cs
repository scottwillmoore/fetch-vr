//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.FetchDriver
{
    [Serializable]
    public class RobotStateMsg : Message
    {
        public const string k_RosMessageName = "fetch_driver_msgs/RobotState";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  Primary message for a robot
        // 
        public HeaderMsg header;
        public bool ready;
        public bool faulted;
        public bool runstopped;
        public BoardStateMsg[] boards;
        public MotorStateMsg[] motors;
        public JointStateMsg[] joints;
        public Power.BreakerStateMsg[] breakers;
        public ChargerStateMsg charger;

        public RobotStateMsg()
        {
            this.header = new HeaderMsg();
            this.ready = false;
            this.faulted = false;
            this.runstopped = false;
            this.boards = new BoardStateMsg[0];
            this.motors = new MotorStateMsg[0];
            this.joints = new JointStateMsg[0];
            this.breakers = new Power.BreakerStateMsg[0];
            this.charger = new ChargerStateMsg();
        }

        public RobotStateMsg(HeaderMsg header, bool ready, bool faulted, bool runstopped, BoardStateMsg[] boards, MotorStateMsg[] motors, JointStateMsg[] joints, Power.BreakerStateMsg[] breakers, ChargerStateMsg charger)
        {
            this.header = header;
            this.ready = ready;
            this.faulted = faulted;
            this.runstopped = runstopped;
            this.boards = boards;
            this.motors = motors;
            this.joints = joints;
            this.breakers = breakers;
            this.charger = charger;
        }

        public static RobotStateMsg Deserialize(MessageDeserializer deserializer) => new RobotStateMsg(deserializer);

        private RobotStateMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.ready);
            deserializer.Read(out this.faulted);
            deserializer.Read(out this.runstopped);
            deserializer.Read(out this.boards, BoardStateMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.motors, MotorStateMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.joints, JointStateMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.breakers, Power.BreakerStateMsg.Deserialize, deserializer.ReadLength());
            this.charger = ChargerStateMsg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.ready);
            serializer.Write(this.faulted);
            serializer.Write(this.runstopped);
            serializer.WriteLength(this.boards);
            serializer.Write(this.boards);
            serializer.WriteLength(this.motors);
            serializer.Write(this.motors);
            serializer.WriteLength(this.joints);
            serializer.Write(this.joints);
            serializer.WriteLength(this.breakers);
            serializer.Write(this.breakers);
            serializer.Write(this.charger);
        }

        public override string ToString()
        {
            return "RobotStateMsg: " +
            "\nheader: " + header.ToString() +
            "\nready: " + ready.ToString() +
            "\nfaulted: " + faulted.ToString() +
            "\nrunstopped: " + runstopped.ToString() +
            "\nboards: " + System.String.Join(", ", boards.ToList()) +
            "\nmotors: " + System.String.Join(", ", motors.ToList()) +
            "\njoints: " + System.String.Join(", ", joints.ToList()) +
            "\nbreakers: " + System.String.Join(", ", breakers.ToList()) +
            "\ncharger: " + charger.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
