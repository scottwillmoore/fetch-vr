//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.FetchDriver
{
    [Serializable]
    public class GyroMsg : Message
    {
        public const string k_RosMessageName = "fetch_driver_msgs/Gyro";
        public override string RosMessageName => k_RosMessageName;

        public HeaderMsg header;
        public uint flags;
        //  Scaled and offset gyro axis values
        public Geometry.Vector3Msg data;
        //  Raw data from gyro (unscaled, and unofffset) 
        public Geometry.Vector3Msg raw;
        //  Scale values used for each axis
        public Geometry.Vector3Msg scale;
        //  Offset value used for each axis
        public Geometry.Vector3Msg offset;
        //  Glitch was detected
        public const uint GLITCH = 1;
        //  Problem initializing gyro
        public const uint INIT_ERROR = 2;
        //  Error reading data
        public const uint READ_ERROR = 4;
        //  Interrupt for new data is not being triggered fast enough
        public const uint INTERRUPT_TOO_SLOW = 8;
        //  Interrupt for new data is being triggrered to quickly
        public const uint INTERRUPT_TOO_FAST = 16;
        //  No sensor is availble
        public const uint SENSOR_NOT_PRESENT = 32;
        //  Robot is definitely moving, gyro output should be non-zero 
        public const uint DEFINITELY_MOVING = 536870912; //  1<<29
        //  Robot is definitely stopped, gyro offset can be adjusted
        public const uint DEFINITELY_STOPPED = 1073741824; //  1<<30
        //  Robot gyro has any type of error, can be used for ignoring
        //  invalid gyro data even without understanding any specific
        //  error types
        public const uint ANY_ERROR = 2147483648; //  1<<31

        public GyroMsg()
        {
            this.header = new HeaderMsg();
            this.flags = 0;
            this.data = new Geometry.Vector3Msg();
            this.raw = new Geometry.Vector3Msg();
            this.scale = new Geometry.Vector3Msg();
            this.offset = new Geometry.Vector3Msg();
        }

        public GyroMsg(HeaderMsg header, uint flags, Geometry.Vector3Msg data, Geometry.Vector3Msg raw, Geometry.Vector3Msg scale, Geometry.Vector3Msg offset)
        {
            this.header = header;
            this.flags = flags;
            this.data = data;
            this.raw = raw;
            this.scale = scale;
            this.offset = offset;
        }

        public static GyroMsg Deserialize(MessageDeserializer deserializer) => new GyroMsg(deserializer);

        private GyroMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.flags);
            this.data = Geometry.Vector3Msg.Deserialize(deserializer);
            this.raw = Geometry.Vector3Msg.Deserialize(deserializer);
            this.scale = Geometry.Vector3Msg.Deserialize(deserializer);
            this.offset = Geometry.Vector3Msg.Deserialize(deserializer);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.flags);
            serializer.Write(this.data);
            serializer.Write(this.raw);
            serializer.Write(this.scale);
            serializer.Write(this.offset);
        }

        public override string ToString()
        {
            return "GyroMsg: " +
            "\nheader: " + header.ToString() +
            "\nflags: " + flags.ToString() +
            "\ndata: " + data.ToString() +
            "\nraw: " + raw.ToString() +
            "\nscale: " + scale.ToString() +
            "\noffset: " + offset.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
