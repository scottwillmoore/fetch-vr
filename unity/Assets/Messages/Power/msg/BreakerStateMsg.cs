//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Power
{
    [Serializable]
    public class BreakerStateMsg : Message
    {
        public const string k_RosMessageName = "power_msgs/BreakerState";
        public override string RosMessageName => k_RosMessageName;

        // 
        //  Gives feedback on a Breaker
        //  Similar to REP-117, missing measurements should be denoted with a NAN
        // 
        public const byte STATE_DISABLED = 0;
        public const byte STATE_ENABLED = 1;
        public const byte STATE_ERROR = 2;
        //  Name of the breaker
        public string name;
        //  The state of the breaker, should be one of the values seen above.
        public byte state;
        //  The current flowing through the breaker, in Amps.
        public float current;
        //  The temperature of the breaker, in degrees C.
        public float temperature;
        //  The rated current limits of the breaker.
        //  Outside of these limits, breaker should trip.
        //  If breaker cannot measure or protect against negative
        //  current, min_rated_current should be 0.0
        public float min_rated_current;
        public float max_rated_current;
        //  The rated temperature limit of breaker.
        //  Above this temperature, breaker should trip.
        public float max_rated_temperature;

        public BreakerStateMsg()
        {
            this.name = "";
            this.state = 0;
            this.current = 0.0f;
            this.temperature = 0.0f;
            this.min_rated_current = 0.0f;
            this.max_rated_current = 0.0f;
            this.max_rated_temperature = 0.0f;
        }

        public BreakerStateMsg(string name, byte state, float current, float temperature, float min_rated_current, float max_rated_current, float max_rated_temperature)
        {
            this.name = name;
            this.state = state;
            this.current = current;
            this.temperature = temperature;
            this.min_rated_current = min_rated_current;
            this.max_rated_current = max_rated_current;
            this.max_rated_temperature = max_rated_temperature;
        }

        public static BreakerStateMsg Deserialize(MessageDeserializer deserializer) => new BreakerStateMsg(deserializer);

        private BreakerStateMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.name);
            deserializer.Read(out this.state);
            deserializer.Read(out this.current);
            deserializer.Read(out this.temperature);
            deserializer.Read(out this.min_rated_current);
            deserializer.Read(out this.max_rated_current);
            deserializer.Read(out this.max_rated_temperature);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.name);
            serializer.Write(this.state);
            serializer.Write(this.current);
            serializer.Write(this.temperature);
            serializer.Write(this.min_rated_current);
            serializer.Write(this.max_rated_current);
            serializer.Write(this.max_rated_temperature);
        }

        public override string ToString()
        {
            return "BreakerStateMsg: " +
            "\nname: " + name.ToString() +
            "\nstate: " + state.ToString() +
            "\ncurrent: " + current.ToString() +
            "\ntemperature: " + temperature.ToString() +
            "\nmin_rated_current: " + min_rated_current.ToString() +
            "\nmax_rated_current: " + max_rated_current.ToString() +
            "\nmax_rated_temperature: " + max_rated_temperature.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
