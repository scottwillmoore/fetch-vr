//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.BuiltinInterfaces;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class PositionIKRequestMsg : Message
    {
        public const string k_RosMessageName = "moveit_msgs/PositionIKRequest";
        public override string RosMessageName => k_RosMessageName;

        //  A Position IK request message
        //  The name of the group which will be used to compute IK
        //  e.g. "right_arm", or "arms" - see IK specification for multiple-groups below
        //  Information from the SRDF will be used to automatically determine which link 
        //  to solve IK for, unless ik_link_name is also specified
        public string group_name;
        //  A RobotState consisting of hint/seed positions for the IK computation and positions 
        //  for all the other joints in the robot. Additional state information provided here is 
        //  used to specify starting positions for other joints/links on the robot.  
        //  This state MUST contain state for all joints to be used by the IK solver
        //  to compute IK. The list of joints that the IK solver deals with can be 
        //  found using the SRDF for the corresponding group
        public RobotStateMsg robot_state;
        //  A set of constraints that the IK must obey; by default, this set of constraints is empty
        public ConstraintsMsg constraints;
        //  Find an IK solution that avoids collisions. By default, this is false
        public bool avoid_collisions;
        //  (OPTIONAL) The name of the link for which we are computing IK
        //  If not specified, the link name will be inferred from a combination 
        //  of the group name and the SRDF. If any values are specified for ik_link_names,
        //  this value is ignored
        public string ik_link_name;
        //  The stamped pose of the link, when the IK solver computes the joint values
        //  for all the joints in a group. This value is ignored if pose_stamped_vector
        //  has any elements specified.
        public Geometry.PoseStampedMsg pose_stamped;
        //  Multi-group parameters
        //  (OPTIONAL) The names of the links for which we are computing IK
        //  If not specified, the link name will be inferred from a combination 
        //  of the group name and the SRDF
        public string[] ik_link_names;
        //  (OPTIONAL) The (stamped) poses of the links we are computing IK for (when a group has more than one end effector)
        //  e.g. The "arms" group might consist of both the "right_arm" and the "left_arm"
        //  The order of the groups referred to is the same as the order setup in the SRDF
        public Geometry.PoseStampedMsg[] pose_stamped_vector;
        //  Maximum allowed time for IK calculation
        public DurationMsg timeout;
        //  Maximum number of IK attempts (if using random seeds; leave as 0 for the default value specified on the param server to be used)
        public int attempts;

        public PositionIKRequestMsg()
        {
            this.group_name = "";
            this.robot_state = new RobotStateMsg();
            this.constraints = new ConstraintsMsg();
            this.avoid_collisions = false;
            this.ik_link_name = "";
            this.pose_stamped = new Geometry.PoseStampedMsg();
            this.ik_link_names = new string[0];
            this.pose_stamped_vector = new Geometry.PoseStampedMsg[0];
            this.timeout = new DurationMsg();
            this.attempts = 0;
        }

        public PositionIKRequestMsg(string group_name, RobotStateMsg robot_state, ConstraintsMsg constraints, bool avoid_collisions, string ik_link_name, Geometry.PoseStampedMsg pose_stamped, string[] ik_link_names, Geometry.PoseStampedMsg[] pose_stamped_vector, DurationMsg timeout, int attempts)
        {
            this.group_name = group_name;
            this.robot_state = robot_state;
            this.constraints = constraints;
            this.avoid_collisions = avoid_collisions;
            this.ik_link_name = ik_link_name;
            this.pose_stamped = pose_stamped;
            this.ik_link_names = ik_link_names;
            this.pose_stamped_vector = pose_stamped_vector;
            this.timeout = timeout;
            this.attempts = attempts;
        }

        public static PositionIKRequestMsg Deserialize(MessageDeserializer deserializer) => new PositionIKRequestMsg(deserializer);

        private PositionIKRequestMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.group_name);
            this.robot_state = RobotStateMsg.Deserialize(deserializer);
            this.constraints = ConstraintsMsg.Deserialize(deserializer);
            deserializer.Read(out this.avoid_collisions);
            deserializer.Read(out this.ik_link_name);
            this.pose_stamped = Geometry.PoseStampedMsg.Deserialize(deserializer);
            deserializer.Read(out this.ik_link_names, deserializer.ReadLength());
            deserializer.Read(out this.pose_stamped_vector, Geometry.PoseStampedMsg.Deserialize, deserializer.ReadLength());
            this.timeout = DurationMsg.Deserialize(deserializer);
            deserializer.Read(out this.attempts);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.group_name);
            serializer.Write(this.robot_state);
            serializer.Write(this.constraints);
            serializer.Write(this.avoid_collisions);
            serializer.Write(this.ik_link_name);
            serializer.Write(this.pose_stamped);
            serializer.WriteLength(this.ik_link_names);
            serializer.Write(this.ik_link_names);
            serializer.WriteLength(this.pose_stamped_vector);
            serializer.Write(this.pose_stamped_vector);
            serializer.Write(this.timeout);
            serializer.Write(this.attempts);
        }

        public override string ToString()
        {
            return "PositionIKRequestMsg: " +
            "\ngroup_name: " + group_name.ToString() +
            "\nrobot_state: " + robot_state.ToString() +
            "\nconstraints: " + constraints.ToString() +
            "\navoid_collisions: " + avoid_collisions.ToString() +
            "\nik_link_name: " + ik_link_name.ToString() +
            "\npose_stamped: " + pose_stamped.ToString() +
            "\nik_link_names: " + System.String.Join(", ", ik_link_names.ToList()) +
            "\npose_stamped_vector: " + System.String.Join(", ", pose_stamped_vector.ToList()) +
            "\ntimeout: " + timeout.ToString() +
            "\nattempts: " + attempts.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
