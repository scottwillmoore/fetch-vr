//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;
using RosMessageTypes.Std;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class CollisionObjectMsg : Message
    {
        public const string k_RosMessageName = "moveit_msgs/CollisionObject";
        public override string RosMessageName => k_RosMessageName;

        //  A header, used for interpreting the poses
        public HeaderMsg header;
        //  The id of the object (name used in MoveIt)
        public string id;
        //  The object type in a database of known objects
        public ObjectRecognition.ObjectTypeMsg type;
        //  The collision geometries associated with the object.
        //  Their poses are with respect to the specified header
        //  Solid geometric primitives
        public Shape.SolidPrimitiveMsg[] primitives;
        public Geometry.PoseMsg[] primitive_poses;
        //  Meshes
        public Shape.MeshMsg[] meshes;
        public Geometry.PoseMsg[] mesh_poses;
        //  Bounding planes (equation is specified, but the plane can be oriented using an additional pose)
        public Shape.PlaneMsg[] planes;
        public Geometry.PoseMsg[] plane_poses;
        //  Adds the object to the planning scene. If the object previously existed, it is replaced.
        public const sbyte ADD = 0;
        //  Removes the object from the environment entirely (everything that matches the specified id)
        public const sbyte REMOVE = 1;
        //  Append to an object that already exists in the planning scene. If the object does not exist, it is added.
        public const sbyte APPEND = 2;
        //  If an object already exists in the scene, new poses can be sent (the geometry arrays must be left empty)
        //  if solely moving the object is desired
        public const sbyte MOVE = 3;
        //  Operation to be performed
        public sbyte operation;

        public CollisionObjectMsg()
        {
            this.header = new HeaderMsg();
            this.id = "";
            this.type = new ObjectRecognition.ObjectTypeMsg();
            this.primitives = new Shape.SolidPrimitiveMsg[0];
            this.primitive_poses = new Geometry.PoseMsg[0];
            this.meshes = new Shape.MeshMsg[0];
            this.mesh_poses = new Geometry.PoseMsg[0];
            this.planes = new Shape.PlaneMsg[0];
            this.plane_poses = new Geometry.PoseMsg[0];
            this.operation = 0;
        }

        public CollisionObjectMsg(HeaderMsg header, string id, ObjectRecognition.ObjectTypeMsg type, Shape.SolidPrimitiveMsg[] primitives, Geometry.PoseMsg[] primitive_poses, Shape.MeshMsg[] meshes, Geometry.PoseMsg[] mesh_poses, Shape.PlaneMsg[] planes, Geometry.PoseMsg[] plane_poses, sbyte operation)
        {
            this.header = header;
            this.id = id;
            this.type = type;
            this.primitives = primitives;
            this.primitive_poses = primitive_poses;
            this.meshes = meshes;
            this.mesh_poses = mesh_poses;
            this.planes = planes;
            this.plane_poses = plane_poses;
            this.operation = operation;
        }

        public static CollisionObjectMsg Deserialize(MessageDeserializer deserializer) => new CollisionObjectMsg(deserializer);

        private CollisionObjectMsg(MessageDeserializer deserializer)
        {
            this.header = HeaderMsg.Deserialize(deserializer);
            deserializer.Read(out this.id);
            this.type = ObjectRecognition.ObjectTypeMsg.Deserialize(deserializer);
            deserializer.Read(out this.primitives, Shape.SolidPrimitiveMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.primitive_poses, Geometry.PoseMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.meshes, Shape.MeshMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.mesh_poses, Geometry.PoseMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.planes, Shape.PlaneMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.plane_poses, Geometry.PoseMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.operation);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.header);
            serializer.Write(this.id);
            serializer.Write(this.type);
            serializer.WriteLength(this.primitives);
            serializer.Write(this.primitives);
            serializer.WriteLength(this.primitive_poses);
            serializer.Write(this.primitive_poses);
            serializer.WriteLength(this.meshes);
            serializer.Write(this.meshes);
            serializer.WriteLength(this.mesh_poses);
            serializer.Write(this.mesh_poses);
            serializer.WriteLength(this.planes);
            serializer.Write(this.planes);
            serializer.WriteLength(this.plane_poses);
            serializer.Write(this.plane_poses);
            serializer.Write(this.operation);
        }

        public override string ToString()
        {
            return "CollisionObjectMsg: " +
            "\nheader: " + header.ToString() +
            "\nid: " + id.ToString() +
            "\ntype: " + type.ToString() +
            "\nprimitives: " + System.String.Join(", ", primitives.ToList()) +
            "\nprimitive_poses: " + System.String.Join(", ", primitive_poses.ToList()) +
            "\nmeshes: " + System.String.Join(", ", meshes.ToList()) +
            "\nmesh_poses: " + System.String.Join(", ", mesh_poses.ToList()) +
            "\nplanes: " + System.String.Join(", ", planes.ToList()) +
            "\nplane_poses: " + System.String.Join(", ", plane_poses.ToList()) +
            "\noperation: " + operation.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
