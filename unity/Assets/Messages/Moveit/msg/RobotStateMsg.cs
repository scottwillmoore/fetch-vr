//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class RobotStateMsg : Message
    {
        public const string k_RosMessageName = "moveit_msgs/RobotState";
        public override string RosMessageName => k_RosMessageName;

        //  This message contains information about the robot state, i.e. the positions of its joints and links
        public Sensor.JointStateMsg joint_state;
        //  Joints that may have multiple DOF are specified here
        public Sensor.MultiDOFJointStateMsg multi_dof_joint_state;
        //  Attached collision objects (attached to some link on the robot)
        public AttachedCollisionObjectMsg[] attached_collision_objects;
        //  Flag indicating whether this scene is to be interpreted as a diff with respect to some other scene
        //  This is mostly important for handling the attached bodies (whether or not to clear the attached bodies
        //  of a moveit::core::RobotState before updating it with this message)
        public bool is_diff;

        public RobotStateMsg()
        {
            this.joint_state = new Sensor.JointStateMsg();
            this.multi_dof_joint_state = new Sensor.MultiDOFJointStateMsg();
            this.attached_collision_objects = new AttachedCollisionObjectMsg[0];
            this.is_diff = false;
        }

        public RobotStateMsg(Sensor.JointStateMsg joint_state, Sensor.MultiDOFJointStateMsg multi_dof_joint_state, AttachedCollisionObjectMsg[] attached_collision_objects, bool is_diff)
        {
            this.joint_state = joint_state;
            this.multi_dof_joint_state = multi_dof_joint_state;
            this.attached_collision_objects = attached_collision_objects;
            this.is_diff = is_diff;
        }

        public static RobotStateMsg Deserialize(MessageDeserializer deserializer) => new RobotStateMsg(deserializer);

        private RobotStateMsg(MessageDeserializer deserializer)
        {
            this.joint_state = Sensor.JointStateMsg.Deserialize(deserializer);
            this.multi_dof_joint_state = Sensor.MultiDOFJointStateMsg.Deserialize(deserializer);
            deserializer.Read(out this.attached_collision_objects, AttachedCollisionObjectMsg.Deserialize, deserializer.ReadLength());
            deserializer.Read(out this.is_diff);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.joint_state);
            serializer.Write(this.multi_dof_joint_state);
            serializer.WriteLength(this.attached_collision_objects);
            serializer.Write(this.attached_collision_objects);
            serializer.Write(this.is_diff);
        }

        public override string ToString()
        {
            return "RobotStateMsg: " +
            "\njoint_state: " + joint_state.ToString() +
            "\nmulti_dof_joint_state: " + multi_dof_joint_state.ToString() +
            "\nattached_collision_objects: " + System.String.Join(", ", attached_collision_objects.ToList()) +
            "\nis_diff: " + is_diff.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
