//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class MotionPlanRequestMsg : Message
    {
        public const string k_RosMessageName = "moveit_msgs/MotionPlanRequest";
        public override string RosMessageName => k_RosMessageName;

        //  This service contains the definition for a request to the motion
        //  planner and the output it provides
        //  Parameters for the workspace that the planner should work inside
        public WorkspaceParametersMsg workspace_parameters;
        //  Starting state updates. If certain joints should be considered
        //  at positions other than the current ones, these positions should
        //  be set here
        public RobotStateMsg start_state;
        //  The possible goal states for the model to plan for. Each element of
        //  the array defines a goal region. The goal is achieved
        //  if the constraints for a particular region are satisfied
        public ConstraintsMsg[] goal_constraints;
        //  No state at any point along the path in the produced motion plan will violate these constraints (this applies to all points, not just waypoints)
        public ConstraintsMsg path_constraints;
        //  The constraints the resulting trajectory must satisfy
        public TrajectoryConstraintsMsg trajectory_constraints;
        //  The name of the motion planner to use. If no name is specified,
        //  a default motion planner will be used
        public string planner_id;
        //  The name of the group of joints on which this planner is operating
        public string group_name;
        //  The number of times this plan is to be computed. Shortest solution
        //  will be reported.
        public int num_planning_attempts;
        //  The maximum amount of time the motion planner is allowed to plan for (in seconds)
        public double allowed_planning_time;
        //  Scaling factors for optionally reducing the maximum joint velocities and
        //  accelerations.  Allowed values are in (0,1].  The maximum joint velocity and
        //  acceleration specified in the robot model are multiplied by thier respective
        //  factors.  If either are outside their valid ranges (importantly, this
        //  includes being set to 0.0), the factor is set to the default value of 1.0
        //  internally (i.e., maximum joint velocity or maximum joint acceleration).
        public double max_velocity_scaling_factor;
        public double max_acceleration_scaling_factor;

        public MotionPlanRequestMsg()
        {
            this.workspace_parameters = new WorkspaceParametersMsg();
            this.start_state = new RobotStateMsg();
            this.goal_constraints = new ConstraintsMsg[0];
            this.path_constraints = new ConstraintsMsg();
            this.trajectory_constraints = new TrajectoryConstraintsMsg();
            this.planner_id = "";
            this.group_name = "";
            this.num_planning_attempts = 0;
            this.allowed_planning_time = 0.0;
            this.max_velocity_scaling_factor = 0.0;
            this.max_acceleration_scaling_factor = 0.0;
        }

        public MotionPlanRequestMsg(WorkspaceParametersMsg workspace_parameters, RobotStateMsg start_state, ConstraintsMsg[] goal_constraints, ConstraintsMsg path_constraints, TrajectoryConstraintsMsg trajectory_constraints, string planner_id, string group_name, int num_planning_attempts, double allowed_planning_time, double max_velocity_scaling_factor, double max_acceleration_scaling_factor)
        {
            this.workspace_parameters = workspace_parameters;
            this.start_state = start_state;
            this.goal_constraints = goal_constraints;
            this.path_constraints = path_constraints;
            this.trajectory_constraints = trajectory_constraints;
            this.planner_id = planner_id;
            this.group_name = group_name;
            this.num_planning_attempts = num_planning_attempts;
            this.allowed_planning_time = allowed_planning_time;
            this.max_velocity_scaling_factor = max_velocity_scaling_factor;
            this.max_acceleration_scaling_factor = max_acceleration_scaling_factor;
        }

        public static MotionPlanRequestMsg Deserialize(MessageDeserializer deserializer) => new MotionPlanRequestMsg(deserializer);

        private MotionPlanRequestMsg(MessageDeserializer deserializer)
        {
            this.workspace_parameters = WorkspaceParametersMsg.Deserialize(deserializer);
            this.start_state = RobotStateMsg.Deserialize(deserializer);
            deserializer.Read(out this.goal_constraints, ConstraintsMsg.Deserialize, deserializer.ReadLength());
            this.path_constraints = ConstraintsMsg.Deserialize(deserializer);
            this.trajectory_constraints = TrajectoryConstraintsMsg.Deserialize(deserializer);
            deserializer.Read(out this.planner_id);
            deserializer.Read(out this.group_name);
            deserializer.Read(out this.num_planning_attempts);
            deserializer.Read(out this.allowed_planning_time);
            deserializer.Read(out this.max_velocity_scaling_factor);
            deserializer.Read(out this.max_acceleration_scaling_factor);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.workspace_parameters);
            serializer.Write(this.start_state);
            serializer.WriteLength(this.goal_constraints);
            serializer.Write(this.goal_constraints);
            serializer.Write(this.path_constraints);
            serializer.Write(this.trajectory_constraints);
            serializer.Write(this.planner_id);
            serializer.Write(this.group_name);
            serializer.Write(this.num_planning_attempts);
            serializer.Write(this.allowed_planning_time);
            serializer.Write(this.max_velocity_scaling_factor);
            serializer.Write(this.max_acceleration_scaling_factor);
        }

        public override string ToString()
        {
            return "MotionPlanRequestMsg: " +
            "\nworkspace_parameters: " + workspace_parameters.ToString() +
            "\nstart_state: " + start_state.ToString() +
            "\ngoal_constraints: " + System.String.Join(", ", goal_constraints.ToList()) +
            "\npath_constraints: " + path_constraints.ToString() +
            "\ntrajectory_constraints: " + trajectory_constraints.ToString() +
            "\nplanner_id: " + planner_id.ToString() +
            "\ngroup_name: " + group_name.ToString() +
            "\nnum_planning_attempts: " + num_planning_attempts.ToString() +
            "\nallowed_planning_time: " + allowed_planning_time.ToString() +
            "\nmax_velocity_scaling_factor: " + max_velocity_scaling_factor.ToString() +
            "\nmax_acceleration_scaling_factor: " + max_acceleration_scaling_factor.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
