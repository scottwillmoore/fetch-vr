//Do not edit! This file was generated by Unity-ROS MessageGeneration.
using System;
using System.Linq;
using System.Collections.Generic;
using System.Text;
using Unity.Robotics.ROSTCPConnector.MessageGeneration;

namespace RosMessageTypes.Moveit
{
    [Serializable]
    public class JointLimitsMsg : Message
    {
        public const string k_RosMessageName = "moveit_msgs/JointLimits";
        public override string RosMessageName => k_RosMessageName;

        //  This message contains information about limits of a particular joint (or control dimension)
        public string joint_name;
        //  true if the joint has position limits
        public bool has_position_limits;
        //  min and max position limits
        public double min_position;
        public double max_position;
        //  true if joint has velocity limits
        public bool has_velocity_limits;
        //  max velocity limit
        public double max_velocity;
        //  min_velocity is assumed to be -max_velocity
        //  true if joint has acceleration limits
        public bool has_acceleration_limits;
        //  max acceleration limit
        public double max_acceleration;
        //  min_acceleration is assumed to be -max_acceleration

        public JointLimitsMsg()
        {
            this.joint_name = "";
            this.has_position_limits = false;
            this.min_position = 0.0;
            this.max_position = 0.0;
            this.has_velocity_limits = false;
            this.max_velocity = 0.0;
            this.has_acceleration_limits = false;
            this.max_acceleration = 0.0;
        }

        public JointLimitsMsg(string joint_name, bool has_position_limits, double min_position, double max_position, bool has_velocity_limits, double max_velocity, bool has_acceleration_limits, double max_acceleration)
        {
            this.joint_name = joint_name;
            this.has_position_limits = has_position_limits;
            this.min_position = min_position;
            this.max_position = max_position;
            this.has_velocity_limits = has_velocity_limits;
            this.max_velocity = max_velocity;
            this.has_acceleration_limits = has_acceleration_limits;
            this.max_acceleration = max_acceleration;
        }

        public static JointLimitsMsg Deserialize(MessageDeserializer deserializer) => new JointLimitsMsg(deserializer);

        private JointLimitsMsg(MessageDeserializer deserializer)
        {
            deserializer.Read(out this.joint_name);
            deserializer.Read(out this.has_position_limits);
            deserializer.Read(out this.min_position);
            deserializer.Read(out this.max_position);
            deserializer.Read(out this.has_velocity_limits);
            deserializer.Read(out this.max_velocity);
            deserializer.Read(out this.has_acceleration_limits);
            deserializer.Read(out this.max_acceleration);
        }

        public override void SerializeTo(MessageSerializer serializer)
        {
            serializer.Write(this.joint_name);
            serializer.Write(this.has_position_limits);
            serializer.Write(this.min_position);
            serializer.Write(this.max_position);
            serializer.Write(this.has_velocity_limits);
            serializer.Write(this.max_velocity);
            serializer.Write(this.has_acceleration_limits);
            serializer.Write(this.max_acceleration);
        }

        public override string ToString()
        {
            return "JointLimitsMsg: " +
            "\njoint_name: " + joint_name.ToString() +
            "\nhas_position_limits: " + has_position_limits.ToString() +
            "\nmin_position: " + min_position.ToString() +
            "\nmax_position: " + max_position.ToString() +
            "\nhas_velocity_limits: " + has_velocity_limits.ToString() +
            "\nmax_velocity: " + max_velocity.ToString() +
            "\nhas_acceleration_limits: " + has_acceleration_limits.ToString() +
            "\nmax_acceleration: " + max_acceleration.ToString();
        }

#if UNITY_EDITOR
        [UnityEditor.InitializeOnLoadMethod]
#else
        [UnityEngine.RuntimeInitializeOnLoadMethod]
#endif
        public static void Register()
        {
            MessageRegistry.Register(k_RosMessageName, Deserialize);
        }
    }
}
